// Cube Payment Handler - Orchestrates 3D Cube payments with crypto QR integration
// Manages cube face clicks and displays QR codes directly in AR space

import React, { useEffect, useState, useRef } from "react";
import evmPaymentService from "../services/evmPaymentService";
import solanaPaymentService from "../services/solanaPaymentService";
import qrCodeService from "../services/qrCodeService";
import { dynamicQRService } from "../services/dynamicQRService";
import QRCode from "react-qr-code";

const CubePaymentHandler = ({
  agent,
  amount = 1,
  userLocation,
  onPaymentComplete,
}) => {
  const [activePayment, setActivePayment] = useState(null);
  const [qrData, setQrData] = useState(null);
  const [paymentStatus, setPaymentStatus] = useState("idle");
  const [selectedChain, setSelectedChain] = useState(null);
  const qrDisplayRef = useRef(null);

  useEffect(() => {
    // Listen for cube face clicks
    const handleCryptoQRSelected = async (event) => {
      console.log("üéØ Crypto QR face clicked");
      await handleDynamicCryptoQRPayment();
    };

    const handleSolanaSelected = async (event) => {
      console.log("üü† Solana face clicked");
      await handleSolanaPayment();
    };

    const handleClosePayment = () => {
      console.log("‚ùå Closing payment");
      closePaymentDisplay();
    };

    const handlePaymentExecution = async (event) => {
      console.log("üí≥ Payment execution triggered");
      await executeCurrentPayment();
    };

    const handleBackToCube = () => {
      console.log("üîô Back to cube");
      closePaymentDisplay();
    };

    // Register event listeners
    document.addEventListener("crypto-qr-selected", handleCryptoQRSelected);
    document.addEventListener("solana-selected", handleSolanaSelected);
    document.addEventListener("close-payment", handleClosePayment);
    document.addEventListener("payment-execute", handlePaymentExecution);
    document.addEventListener("back-to-cube", handleBackToCube);

    return () => {
      document.removeEventListener("crypto-qr-selected", handleCryptoQRSelected);
      document.removeEventListener("solana-selected", handleSolanaSelected);
      document.removeEventListener("close-payment", handleClosePayment);
      document.removeEventListener("payment-execute", handlePaymentExecution);
      document.removeEventListener("back-to-cube", handleBackToCube);
    };
  }, [agent, amount]);

  // Handle Dynamic EVM Crypto QR Payment (NEW)
  const handleDynamicCryptoQRPayment = async () => {
    try {
      setPaymentStatus("generating");

      console.log("üîß Generating dynamic QR payment for agent:", agent.name);
      console.log("üí∞ Amount:", amount, "USD");

      // Generate dynamic QR based on user's current network
      const qrResult = await dynamicQRService.generateDynamicQR(agent, amount);
      setQrData(qrResult);
      setActivePayment(qrResult);

      console.log("üåü Displaying centered QR in AR space...");
      displayCenteredQRInAR(qrResult);

      setPaymentStatus("waiting");
    } catch (error) {
      console.error("‚ùå Dynamic crypto QR payment error:", error);
      setPaymentStatus("error");
      showErrorInAR(error.message);
    }
  };

  // Execute current payment (NEW)
  const executeCurrentPayment = async () => {
    if (!qrData) {
      console.error("‚ùå No payment data available");
      return;
    }

    try {
      setPaymentStatus("processing");
      
      console.log("ÔøΩ Executing payment...");
      const result = await dynamicQRService.executePayment(qrData);
      
      console.log("‚úÖ Payment successful:", result);
      setPaymentStatus("completed");
      
      // Show success message
      showPaymentSuccess(result);
      
      // Notify parent component
      if (onPaymentComplete) {
        onPaymentComplete(result);
      }
      
    } catch (error) {
      console.error("‚ùå Payment execution failed:", error);
      setPaymentStatus("error");
      showPaymentError(error.message);
    }
  };

  // Handle Solana Payment
  const handleSolanaPayment = async () => {
    try {
      setPaymentStatus("generating");

      console.log("üü† Generating Solana payment...");
      solanaPaymentService.switchSolanaNetwork("TESTNET");
      const solanaPayment = solanaPaymentService.generateSolanaAgentPayment(
        agent,
        amount,
        "SOL"
      );
      setActivePayment(solanaPayment);

      const qrResult = await generateQRCode(solanaPayment.qrData, "Solana");
      setQrData(qrResult);

      displayQRInAR(qrResult, solanaPayment, {
        name: "Solana Testnet",
        color: "#9945FF",
      });
      setPaymentStatus("waiting");
    } catch (error) {
      console.error("‚ùå Solana payment error:", error);
      setPaymentStatus("error");
      showErrorInAR(error.message);
    }
  };

  // Generate QR code with enhanced data
  const generateQRCode = async (qrDataString, network) => {
    try {
      const qrCodeDataUrl = await qrCodeService.generateQRCode(qrDataString);

      return {
        dataUrl: qrCodeDataUrl,
        rawData: qrDataString,
        network: network,
        timestamp: Date.now(),
      };
    } catch (error) {
      console.error("‚ùå QR generation failed:", error);
      throw error;
    }
  };

  // Display QR code centered on screen (IMPROVED)
  const displayCenteredQRInAR = (qrResult) => {
    try {
      // Remove any existing payment display
      closePaymentDisplay();

      const scene = document.querySelector("a-scene");
      if (!scene) {
        console.error("‚ùå A-Frame scene not found");
        return;
      }

      // Hide the payment cube
      const cube = document.querySelector('#payment-cube');
      if (cube) {
        cube.setAttribute('visible', false);
      }

      // Create QR container (centered)
      const qrContainer = document.createElement("a-entity");
      qrContainer.setAttribute("id", "payment-qr-display");
      qrContainer.setAttribute("position", "0 0 -2.5"); // Centered in front of camera

      // QR Code Background with green border
      const qrBorder = document.createElement("a-plane");
      qrBorder.setAttribute("position", "0 0.5 -0.01");
      qrBorder.setAttribute("width", "2.4");
      qrBorder.setAttribute("height", "2.4");
      qrBorder.setAttribute("material", `color: ${qrResult.networkInfo.color}; opacity: 0.8`);
      qrContainer.appendChild(qrBorder);

      // QR Code Image (centered)
      const qrPlane = document.createElement("a-plane");
      qrPlane.setAttribute("position", "0 0.5 0");
      qrPlane.setAttribute("width", "2.2");
      qrPlane.setAttribute("height", "2.2");
      qrPlane.setAttribute("material", `src: ${qrResult.qrCodeUrl}; transparent: true`);
      qrContainer.appendChild(qrPlane);

      // Payment Title
      const titleText = document.createElement("a-text");
      titleText.setAttribute("position", "0 1.5 0");
      titleText.setAttribute("text", {
        value: `üí≥ ${qrResult.networkInfo.name} Payment`,
        align: "center",
        color: qrResult.networkInfo.color,
        width: 8,
        font: "roboto",
      });
      qrContainer.appendChild(titleText);

      // "Tap to Pay" button (clickable)
      const payButton = document.createElement("a-entity");
      payButton.setAttribute("id", "payment-instructions");
      payButton.setAttribute("position", "0 -1.2 0");
      payButton.setAttribute("geometry", "primitive: plane; width: 1.8; height: 0.4");
      payButton.setAttribute("material", `color: ${qrResult.networkInfo.color}; opacity: 0.9`);
      payButton.setAttribute("text", {
        value: "Tap to Pay",
        align: "center",
        color: "#000000",
        width: 12,
        font: "roboto"
      });
      payButton.setAttribute("class", "clickable payment-trigger");
      payButton.setAttribute("cursor-listener", "");
      payButton.addEventListener("click", () => {
        document.dispatchEvent(new CustomEvent("payment-execute"));
      });
      qrContainer.appendChild(payButton);

      // Amount display
      const amountText = document.createElement("a-text");
      amountText.setAttribute("position", "0 -1.8 0");
      amountText.setAttribute("text", {
        value: `$${qrResult.tokenInfo.amount} USD (${qrResult.tokenInfo.amount} USDC)`,
        align: "center",
        color: "#ffffff",
        width: 8,
      });
      qrContainer.appendChild(amountText);

      // Network info
      const networkText = document.createElement("a-text");
      networkText.setAttribute("position", "0 -2.2 0");
      networkText.setAttribute("text", {
        value: `Network: ${qrResult.networkInfo.name}`,
        align: "center",
        color: qrResult.networkInfo.color,
        width: 6,
      });
      qrContainer.appendChild(networkText);

      // Back to Cube button
      const backButton = document.createElement("a-entity");
      backButton.setAttribute("id", "back-to-cube-btn");
      backButton.setAttribute("position", "0 -2.8 0");
      backButton.setAttribute("geometry", "primitive: plane; width: 1.6; height: 0.4");
      backButton.setAttribute("material", "color: #333333; opacity: 0.8");
      backButton.setAttribute("text", {
        value: "‚Üê Back to Cube",
        align: "center",
        color: "#ffffff",
        width: 10,
      });
      backButton.setAttribute("class", "clickable back-to-cube");
      backButton.setAttribute("cursor-listener", "");
      backButton.addEventListener("click", () => {
        document.dispatchEvent(new CustomEvent("back-to-cube"));
      });
      qrContainer.appendChild(backButton);

      // Add entrance animation
      qrContainer.setAttribute("animation", "property: scale; from: 0 0 0; to: 1 1 1; dur: 500; easing: easeOutBack");

      // Add to scene
      scene.appendChild(qrContainer);
      qrDisplayRef.current = qrContainer;

      console.log("‚úÖ Centered QR code displayed in AR space");

    } catch (error) {
      console.error("‚ùå Failed to display centered QR in AR:", error);
    }
  };

  // Show payment success message in AR (NEW)
  const showPaymentSuccess = (result) => {
    try {
      const scene = document.querySelector("a-scene");
      if (!scene) return;

      closePaymentDisplay();

      const successContainer = document.createElement("a-entity");
      successContainer.setAttribute("id", "payment-success-display");
      successContainer.setAttribute("position", "0 0 -2.5");

      // Success background
      const successBackground = document.createElement("a-plane");
      successBackground.setAttribute("width", "4");
      successBackground.setAttribute("height", "3");
      successBackground.setAttribute("material", "color: #004400; opacity: 0.9");
      successContainer.appendChild(successBackground);

      // Success icon
      const successText = document.createElement("a-text");
      successText.setAttribute("position", "0 0.8 0.01");
      successText.setAttribute("text", {
        value: "‚úÖ Payment Successful!",
        align: "center",
        color: "#00ff00",
        width: 10,
        font: "roboto"
      });
      successContainer.appendChild(successText);

      // Transaction details
      const txText = document.createElement("a-text");
      txText.setAttribute("position", "0 0.3 0.01");
      txText.setAttribute("text", {
        value: `${result.amount} ${result.token} sent`,
        align: "center",
        color: "#ccffcc",
        width: 8,
      });
      successContainer.appendChild(txText);

      // Network info
      const networkText = document.createElement("a-text");
      networkText.setAttribute("position", "0 -0.1 0.01");
      networkText.setAttribute("text", {
        value: `Network: ${result.network}`,
        align: "center",
        color: "#ccffcc",
        width: 6,
      });
      successContainer.appendChild(networkText);

      // Transaction hash (shortened)
      const hashText = document.createElement("a-text");
      hashText.setAttribute("position", "0 -0.5 0.01");
      hashText.setAttribute("text", {
        value: `TX: ${result.transactionHash.slice(0, 10)}...`,
        align: "center",
        color: "#aaffaa",
        width: 6,
      });
      successContainer.appendChild(hashText);

      // Back button
      const backButton = document.createElement("a-entity");
      backButton.setAttribute("position", "0 -1.2 0.01");
      backButton.setAttribute("geometry", "primitive: plane; width: 2; height: 0.4");
      backButton.setAttribute("material", "color: #00aa00; opacity: 0.8");
      backButton.setAttribute("text", {
        value: "‚Üê Back to Cube",
        align: "center",
        color: "#ffffff",
        width: 10,
      });
      backButton.setAttribute("class", "clickable");
      backButton.addEventListener("click", () => {
        document.dispatchEvent(new CustomEvent("back-to-cube"));
      });
      successContainer.appendChild(backButton);

      scene.appendChild(successContainer);
      qrDisplayRef.current = successContainer;

      // Auto-close after 10 seconds
      setTimeout(() => {
        if (qrDisplayRef.current === successContainer) {
          closePaymentDisplay();
        }
      }, 10000);

    } catch (error) {
      console.error("‚ùå Failed to show payment success:", error);
    }
  };

  // Show payment error message in AR (IMPROVED)
  const showPaymentError = (errorMessage) => {
    try {
      const scene = document.querySelector("a-scene");
      if (!scene) return;

      closePaymentDisplay();

      const errorContainer = document.createElement("a-entity");
      errorContainer.setAttribute("id", "payment-error-display");
      errorContainer.setAttribute("position", "0 0 -2.5");

      // Error background
      const errorBackground = document.createElement("a-plane");
      errorBackground.setAttribute("width", "4");
      errorBackground.setAttribute("height", "2.5");
      errorBackground.setAttribute("material", "color: #440000; opacity: 0.9");
      errorContainer.appendChild(errorBackground);

      // Error icon and title
      const errorText = document.createElement("a-text");
      errorText.setAttribute("position", "0 0.5 0.01");
      errorText.setAttribute("text", {
        value: "‚ùå Payment Failed",
        align: "center",
        color: "#ff4444",
        width: 10,
        font: "roboto"
      });
      errorContainer.appendChild(errorText);

      // Error message
      const errorDetails = document.createElement("a-text");
      errorDetails.setAttribute("position", "0 0 0.01");
      errorDetails.setAttribute("text", {
        value: errorMessage.substring(0, 60) + (errorMessage.length > 60 ? "..." : ""),
        align: "center",
        color: "#ffcccc",
        width: 6,
      });
      errorContainer.appendChild(errorDetails);

      // Back button
      const backButton = document.createElement("a-entity");
      backButton.setAttribute("position", "0 -0.8 0.01");
      backButton.setAttribute("geometry", "primitive: plane; width: 2; height: 0.4");
      backButton.setAttribute("material", "color: #aa0000; opacity: 0.8");
      backButton.setAttribute("text", {
        value: "‚Üê Back to Cube",
        align: "center",
        color: "#ffffff",
        width: 10,
      });
      backButton.setAttribute("class", "clickable");
      backButton.addEventListener("click", () => {
        document.dispatchEvent(new CustomEvent("back-to-cube"));
      });
      errorContainer.appendChild(backButton);

      scene.appendChild(errorContainer);
      qrDisplayRef.current = errorContainer;

      console.log("‚ùå Payment error displayed in AR");

      // Auto-close after 8 seconds
      setTimeout(() => {
        if (qrDisplayRef.current === errorContainer) {
          closePaymentDisplay();
        }
      }, 8000);

    } catch (error) {
      console.error("‚ùå Failed to show payment error:", error);
    }
  };
      qrDisplayRef.current = errorContainer;

      // Auto-hide error after 10 seconds
      setTimeout(() => {
        if (qrDisplayRef.current === errorContainer) {
          closePaymentDisplay();
        }
      }, 10000);
    } catch (error) {
      console.error("‚ùå Failed to show error in AR:", error);
    }
  };

  // Close payment display
  const closePaymentDisplay = () => {
    if (qrDisplayRef.current) {
      const scene = document.querySelector("a-scene");
      if (scene && qrDisplayRef.current.parentNode === scene) {
        scene.removeChild(qrDisplayRef.current);
      }
      qrDisplayRef.current = null;
    }

    setActivePayment(null);
    setQrData(null);
    setPaymentStatus("idle");
    setSelectedChain(null);
  };

  // This component manages events, no direct render
  return null;
};

export default CubePaymentHandler;
